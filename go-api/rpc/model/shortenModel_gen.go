// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shortenFieldNames          = builder.RawFieldNames(&Shorten{}, true)
	shortenRows                = strings.Join(shortenFieldNames, ",")
	shortenRowsExpectAutoSet   = strings.Join(stringx.Remove(shortenFieldNames, "create_time", "update_time"), ",")
	shortenRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(shortenFieldNames, "shorten", "create_time", "update_time"))

	cachePublicShortenShortenPrefix = "cache:public:shorten:shorten:"
)

type (
	shortenModel interface {
		Insert(ctx context.Context, data *Shorten) (sql.Result, error)
		FindOne(ctx context.Context, shorten string) (*Shorten, error)
		Update(ctx context.Context, data *Shorten) error
		Delete(ctx context.Context, shorten string) error
	}

	defaultShortenModel struct {
		sqlc.CachedConn
		table string
	}

	Shorten struct {
		Shorten string `db:"shorten"`
		Url     string `db:"url"`
	}
)

func newShortenModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultShortenModel {
	return &defaultShortenModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."shorten"`,
	}
}

func (m *defaultShortenModel) Insert(ctx context.Context, data *Shorten) (sql.Result, error) {
	publicShortenShortenKey := fmt.Sprintf("%s%v", cachePublicShortenShortenPrefix, data.Shorten)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, shortenRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Shorten, data.Url)
	}, publicShortenShortenKey)
	return ret, err
}

func (m *defaultShortenModel) FindOne(ctx context.Context, shorten string) (*Shorten, error) {
	publicShortenShortenKey := fmt.Sprintf("%s%v", cachePublicShortenShortenPrefix, shorten)
	var resp Shorten
	err := m.QueryRowCtx(ctx, &resp, publicShortenShortenKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where shorten = $1 limit 1", shortenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, shorten)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShortenModel) Update(ctx context.Context, data *Shorten) error {
	publicShortenShortenKey := fmt.Sprintf("%s%v", cachePublicShortenShortenPrefix, data.Shorten)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where shorten = $1", m.table, shortenRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Shorten, data.Url)
	}, publicShortenShortenKey)
	return err
}

func (m *defaultShortenModel) Delete(ctx context.Context, shorten string) error {
	publicShortenShortenKey := fmt.Sprintf("%s%v", cachePublicShortenShortenPrefix, shorten)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where shorten = $1", m.table)
		return conn.ExecCtx(ctx, query, shorten)
	}, publicShortenShortenKey)
	return err
}

func (m *defaultShortenModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicShortenShortenPrefix, primary)
}

func (m *defaultShortenModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where shorten = $1 limit 1", shortenRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultShortenModel) tableName() string {
	return m.table
}
